{"ast":null,"code":"/**\n * Logs in a user with the given email and password.\n * @param {string} email - The email of the user.\n * @param {string} password - The password of the user.\n * @returns {function} - A function that dispatches an action to log in the user.\n */\nimport { USER_REGISTER_REQUEST, USER_DETAILS_FAIL, USER_DETAILS_SUCCESS, USER_LOGIN_SUCCESS, USER_LOGIN_REQUEST, USER_LOGIN_FAIL, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL } from \"../constants/userConstant\";\nimport axios from 'axios';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http:localhost:5000/api/v1//login', {\n      email,\n      password\n    }, config);\n    if (data.user) {\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data.user\n      });\n    }\n  } catch (error) {\n\n    // dispatch({ type: USER_LOGIN_FAIL, payload: error.response && error.response.data.message ? error.response.data.message : error.message })\n  }\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/register', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data.user\n    });\n  } catch {\n    // dispatch({ type: USER_REGISTER_FAIL,payload: error.response && error.response.data.message ? error.response.data.message : error.message })\n  }\n};","map":{"version":3,"names":["USER_REGISTER_REQUEST","USER_DETAILS_FAIL","USER_DETAILS_SUCCESS","USER_LOGIN_SUCCESS","USER_LOGIN_REQUEST","USER_LOGIN_FAIL","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","axios","login","email","password","dispatch","type","config","headers","data","post","user","payload","error","register","name"],"sources":["/home/codecraft/Desktop/socket-learning/client/src/actions/userActions.js"],"sourcesContent":["/**\n * Logs in a user with the given email and password.\n * @param {string} email - The email of the user.\n * @param {string} password - The password of the user.\n * @returns {function} - A function that dispatches an action to log in the user.\n */\nimport {\n  USER_REGISTER_REQUEST,\n  USER_DETAILS_FAIL,\n  USER_DETAILS_SUCCESS,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_FAIL,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n} from \"../constants/userConstant\";\nimport axios from 'axios'\n\n\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_LOGIN_REQUEST })\n\n\n    const config = { headers: { 'Content-Type': 'application/json' } }\n\n    const { data } = await axios.post('http:localhost:5000/api/v1//login', { email, password }, config)\n\n    if(data.user){\n\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data.user })\n    }\n  }\n  catch (error) {\n\n    // dispatch({ type: USER_LOGIN_FAIL, payload: error.response && error.response.data.message ? error.response.data.message : error.message })\n\n  }\n\n\n\n}\n\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_REGISTER_REQUEST })\n\n     const config = { headers: { 'Content-Type': 'application/json' } }\n    const { data } = await axios.post('/api/users/register', { name, email, password }, config)\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data.user })\n  }\n\n  catch{\n    // dispatch({ type: USER_REGISTER_FAIL,payload: error.response && error.response.data.message ? error.response.data.message : error.message })\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SACEA,qBAAqB,EACrBC,iBAAiB,EACjBC,oBAAoB,EACpBC,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,EACfC,qBAAqB,EACrBC,kBAAkB,QACb,2BAA2B;AAClC,OAAOC,KAAK,MAAM,OAAO;AAIzB,OAAO,MAAMC,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC5D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAET;IAAmB,CAAC,CAAC;IAGtC,MAAMU,MAAM,GAAG;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAAE,CAAC;IAElE,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,mCAAmC,EAAE;MAAEP,KAAK;MAAEC;IAAS,CAAC,EAAEG,MAAM,CAAC;IAEnG,IAAGE,IAAI,CAACE,IAAI,EAAC;MAEbN,QAAQ,CAAC;QAAEC,IAAI,EAAEV,kBAAkB;QAAEgB,OAAO,EAAEH,IAAI,CAACE;MAAK,CAAC,CAAC;IAC1D;EACF,CAAC,CACD,OAAOE,KAAK,EAAE;;IAEZ;EAAA;AAMJ,CAAC;AAGD,OAAO,MAAMC,QAAQ,GAAGA,CAACC,IAAI,EAAEZ,KAAK,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EACrE,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEb;IAAsB,CAAC,CAAC;IAExC,MAAMc,MAAM,GAAG;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAAE,CAAC;IACnE,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,qBAAqB,EAAE;MAAEK,IAAI;MAAEZ,KAAK;MAAEC;IAAS,CAAC,EAAEG,MAAM,CAAC;IAC3FF,QAAQ,CAAC;MAAEC,IAAI,EAAEP,qBAAqB;MAAEa,OAAO,EAAEH,IAAI,CAACE;IAAK,CAAC,CAAC;EAC/D,CAAC,CAED,MAAK;IACH;EAAA;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/**\n * Logs in a user with the given email and password.\n * @param {string} email - The email of the user.\n * @param {string} password - The password of the user.\n * @returns {function} - A function that dispatches an action to log in the user.\n */\nimport { USER_REGISTER_REQUEST, USER_DETAILS_FAIL, USER_DETAILS_SUCCESS, USER_LOGIN_SUCCESS, USER_LOGIN_REQUEST, USER_LOGIN_FAIL, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, CLEAR_ERRORS } from \"../constants/userConstant\";\nimport axios from 'axios';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http://localhost:5000/api/v1/login', {\n      email,\n      password\n    }, config);\n    if (data.user) {\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data.user\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const register = (username, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('http://localhost:5000/api/v1/loginr', {\n      username,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Clearing Errors\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["USER_REGISTER_REQUEST","USER_DETAILS_FAIL","USER_DETAILS_SUCCESS","USER_LOGIN_SUCCESS","USER_LOGIN_REQUEST","USER_LOGIN_FAIL","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","CLEAR_ERRORS","axios","login","email","password","dispatch","type","config","headers","data","post","user","payload","error","response","message","register","username","clearErrors"],"sources":["/home/codecraft/Desktop/socket-learning/client/src/actions/userActions.js"],"sourcesContent":["/**\n * Logs in a user with the given email and password.\n * @param {string} email - The email of the user.\n * @param {string} password - The password of the user.\n * @returns {function} - A function that dispatches an action to log in the user.\n */\nimport {\n  USER_REGISTER_REQUEST,\n  USER_DETAILS_FAIL,\n  USER_DETAILS_SUCCESS,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_FAIL,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n  CLEAR_ERRORS\n} from \"../constants/userConstant\";\nimport axios from 'axios'\n\n\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_LOGIN_REQUEST })\n\n\n    const config = { headers: { 'Content-Type': 'application/json' } }\n\n    const { data } = await axios.post('http://localhost:5000/api/v1/login', { email, password }, config)\n\n    if(data.user){\n\n    dispatch({ type: USER_LOGIN_SUCCESS, payload: data.user })\n    }\n  }\n  catch (error) {\n\n    dispatch({ type: USER_LOGIN_FAIL, payload: error.response.data.message})\n\n  }\n\n\n\n}\n\n\nexport const register = (username, email, password) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_REGISTER_REQUEST })\n\n     const config = { headers: { 'Content-Type': 'application/json' } }\n    const { data } = await axios.post('http://localhost:5000/api/v1/loginr', { username, email, password }, config)\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data.user })\n  }\n\n  catch(error){\n    dispatch({ type: USER_REGISTER_FAIL,payload: error.response && error.response.data.message ? error.response.data.message : error.message })\n  }\n}\n\n\n// Clearing Errors\nexport const clearErrors = () => async (dispatch) => {\n  dispatch({ type: CLEAR_ERRORS });\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SACEA,qBAAqB,EACrBC,iBAAiB,EACjBC,oBAAoB,EACpBC,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,EACfC,qBAAqB,EACrBC,kBAAkB,EAClBC,YAAY,QACP,2BAA2B;AAClC,OAAOC,KAAK,MAAM,OAAO;AAIzB,OAAO,MAAMC,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC5D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEV;IAAmB,CAAC,CAAC;IAGtC,MAAMW,MAAM,GAAG;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAAE,CAAC;IAElE,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,oCAAoC,EAAE;MAAEP,KAAK;MAAEC;IAAS,CAAC,EAAEG,MAAM,CAAC;IAEpG,IAAGE,IAAI,CAACE,IAAI,EAAC;MAEbN,QAAQ,CAAC;QAAEC,IAAI,EAAEX,kBAAkB;QAAEiB,OAAO,EAAEH,IAAI,CAACE;MAAK,CAAC,CAAC;IAC1D;EACF,CAAC,CACD,OAAOE,KAAK,EAAE;IAEZR,QAAQ,CAAC;MAAEC,IAAI,EAAET,eAAe;MAAEe,OAAO,EAAEC,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM;IAAO,CAAC,CAAC;EAE1E;AAIF,CAAC;AAGD,OAAO,MAAMC,QAAQ,GAAGA,CAACC,QAAQ,EAAEd,KAAK,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EACzE,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEd;IAAsB,CAAC,CAAC;IAExC,MAAMe,MAAM,GAAG;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAAE,CAAC;IACnE,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,qCAAqC,EAAE;MAAEO,QAAQ;MAAEd,KAAK;MAAEC;IAAS,CAAC,EAAEG,MAAM,CAAC;IAC/GF,QAAQ,CAAC;MAAEC,IAAI,EAAER,qBAAqB;MAAEc,OAAO,EAAEH,IAAI,CAACE;IAAK,CAAC,CAAC;EAC/D,CAAC,CAED,OAAME,KAAK,EAAC;IACVR,QAAQ,CAAC;MAAEC,IAAI,EAAEP,kBAAkB;MAACa,OAAO,EAAEC,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM,OAAO,GAAGF,KAAK,CAACC,QAAQ,CAACL,IAAI,CAACM,OAAO,GAAGF,KAAK,CAACE;IAAQ,CAAC,CAAC;EAC7I;AACF,CAAC;;AAGD;AACA,OAAO,MAAMG,WAAW,GAAGA,CAAA,KAAM,MAAOb,QAAQ,IAAK;EACnDA,QAAQ,CAAC;IAAEC,IAAI,EAAEN;EAAa,CAAC,CAAC;AAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}